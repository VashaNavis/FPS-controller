using UnityEngine;

public class FPSController : MonoBehaviour
{
    // Player movement speed
    public float movementSpeed = 5f;

    // Player camera
    public Transform playerCamera;

    // Camera sensitivity
    public float mouseSensitivity = 2f;

    // Jump force
    public float jumpForce = 5f;

    // Player's rigidbody component
    private Rigidbody rb;

    // Vertical rotation value
    private float verticalRotation = 0f;

    // Player input
    private float forwardMovement;
    private float strafeMovement;
    private bool isJumping;

    private void Start()
    {
        // Get the player's rigidbody component
        rb = GetComponent<Rigidbody>();

        // Hide and lock the cursor
        Cursor.lockState = CursorLockMode.Locked;
        Cursor.visible = false;
    }

    private void Update()
    {
        // Read player input
        forwardMovement = Input.GetAxis("Vertical") * movementSpeed;
        strafeMovement = Input.GetAxis("Horizontal") * movementSpeed;
        isJumping = Input.GetButtonDown("Jump");

        // Rotate the player horizontally
        float horizontalRotation = Input.GetAxis("Mouse X") * mouseSensitivity;
        transform.Rotate(0f, horizontalRotation, 0f);

        // Rotate the camera vertically
        verticalRotation -= Input.GetAxis("Mouse Y") * mouseSensitivity;
        verticalRotation = Mathf.Clamp(verticalRotation, -90f, 90f);
        playerCamera.localRotation = Quaternion.Euler(verticalRotation, 0f, 0f);

        // Shoot mechanic (Example: Left mouse button)
        if (Input.GetButtonDown("Fire1"))
        {
            Shoot();
        }
    }

    private void FixedUpdate()
    {
        // Move the player
        Vector3 movement = (transform.forward * forwardMovement + transform.right * strafeMovement) * Time.fixedDeltaTime;
        movement.y = rb.velocity.y; // Preserve vertical velocity (e.g., jumping, falling)
        rb.velocity = movement;

        // Jump mechanic
        if (isJumping)
        {
            rb.AddForce(Vector3.up * jumpForce, ForceMode.Impulse);
            isJumping = false;
        }
    }

    private void Shoot()
    {
        // Raycast to determine if we hit something
        RaycastHit hit;
        if (Physics.Raycast(playerCamera.position, playerCamera.forward, out hit))
        {
            // Perform actions based on the hit (e.g., apply damage, trigger effects)
            Debug.Log("Hit: " + hit.transform.name);
        }
    }
}
